local Selection = game:GetService("Selection")
local ChangeHistoryService = game:GetService("ChangeHistoryService")

local Package = script.Parent.Parent.Parent
local Util = require(Package.Util)
local Pages = require(Package.Resources.Components.Pages)
local TagUtils = require(Package.Util.TagUtils)

local componentFiles = script.Parent.ComponentFiles
local addonFiles = script.Parent.AddonFiles

local COMMA_BREAK = ",*%s*"
local TUNE_MATCH = `local%s[%w%p+]{COMMA_BREAK}(%w+)%s=%spcall%(require,%s*(%d+)%)%w*`

local function positionModel(model: Model)
    local newPos = workspace.CurrentCamera.CFrame * CFrame.new(0, 0, -36)
    model:PivotTo(CFrame.new(newPos.Position))
    Selection:Set({model})
end

local function insertModel(modelName: string, parent: Instance?): Instance
    ChangeHistoryService:SetWaypoint(string.format("Inserting model '%s'", modelName))
    local newModel = (componentFiles:FindFirstChild(modelName) or addonFiles:FindFirstChild(modelName)):Clone()
    newModel.Parent = parent

    ChangeHistoryService:SetWaypoint(string.format("Inserting model '%s'", modelName))
    return newModel
end

local function getInsertFolder(specialChildName: string): Instance
    local currentMap = Util.mapModel:get(false)

    return Util.hasSpecialFolder:get(false) 
        and currentMap.Special:FindFirstChild(specialChildName) 
        or currentMap:FindFirstChild("Geometry") 
        or currentMap
end

local function mergeSources(sourceA: string, sourceB: string, line: number): string
	local lines = sourceA:split("\n");
	local newLines = sourceB:split("\n");

	for i = 1, #newLines do
		table.insert(lines, i + line - 1, newLines[i])
	end
	
	return table.concat(lines, "\n")
end

local function getScriptLineMatch(source: string, match: string): number?
    local line = -1
    local lines = source:split("\n")

    for i = 1, #lines do
        if lines[i]:match(match) then
            line = i
            break
        end
    end

    return if line == -1 then nil else line
end

return {
    Addons = {
        {
            Name = "Tune",
            Creator = "Ethan76167",
            Icon = "rbxassetid://12570661206",
            LayoutOrder = 1,
            Tooltip = {
                Header = "TUNE",
                Tooltip = "Admin panel designed for TRIA.os to make testing maps as simple as possible. \n\nNow with the abillity to implement it directly into maps and automatically fire commands, Tune can make map testing a piece of cake!"
            },
    
            InsertFunction = function()
                if Util.failedScriptInjection(Util._Errors.SCRIPT_INSERT_ERROR) then
                    return false
                end

                local currentMap = Util.mapModel:get(false)
                local mapScript = currentMap:FindFirstChild("MapScript")

                if not mapScript then
                    return
                end

                local variable, moduleId = mapScript.Source:match(TUNE_MATCH)
                if variable and variable:lower() == "tune" or (tonumber(moduleId) and tonumber(moduleId) == 9193619374) then
                    Util:ShowMessage("Module already installed", "TUNE is already installed in your map!")
                    return
                end

                ChangeHistoryService:SetWaypoint("Inserting TUNE")
                local line = getScriptLineMatch(mapScript.Source, "local (%w+)[:%s%w+]* = game.GetMapLib:Invoke%(%)%(%)")
                
                if line then
                    mapScript.Source = mergeSources(mapScript.Source, [[

task.spawn(function()
    -- The script below was automatically generated by the
    -- TRIA.os development plugin
    
    local _, Tune = pcall(require, 9193619374)
    pcall(Tune.Init, Tune, true, true)
end)
]], line + 1)
                    Util.debugWarn("Successfully inserted TUNE!")
                    ChangeHistoryService:SetWaypoint("Inserted tune")
                else
                    Util:ShowMessage(Util._Headers.ERROR_HEADER, "Failed to install TUNE, this could be because the MapScript is setup incorrectly. Please make sure you have the following line at the top of your MapScript:\n\n<b>local MapLib = game.GetMapLib:Invoke()()</b>")
                end
                ChangeHistoryService:SetWaypoint("Inserted TUNE")
            end
        },  {
            Name = "",
            Creator = "not_grif",
            Icon = "rbxassetid://12581932576",
            LayoutOrder = 2,
            Tooltip = {
                Header = "EasyTP",
                Tooltip = "Allows for you to easily add timed teleports into your maps with minimal setup. \n\nThis addon is integrated with Object Tag selection and View Mode selection."
            },
    
            InsertFunction = function()
                if Util.failedScriptInjection(Util._Errors.SCRIPT_INSERT_ERROR) then
                    return
                end

                local currentMap = Util.mapModel:get(false)
                if currentMap.MapScript:FindFirstChild("EasyTP") and currentMap.MapScript.EasyTP:FindFirstChild("LocalFlash") then
                    Util:ShowMessage("Cannot Insert Addon", "This addon already exists in your map! To update the addon, delete it from your map and retry.")
                    return
                end

                if not Util.hasSpecialFolder:get(false) then
                    Util:ShowMessage("Cannot Insert Addon", "This addon requires your map to support the Optimized Structure (Folder named 'Special'). You can add the special folder under the 'Insert' tab.", {
                        Text = "Take me there",
                        Callback = function()
                            Pages:ChangePage("Insert")
                        end
                    })
                    return
                end

                ChangeHistoryService:SetWaypoint("Inserting EasyTP")

                local newModel = addonFiles:FindFirstChild("EasyTP"):Clone()
                newModel.Parent = currentMap.MapScript

                currentMap.MapScript.Source = string.format("%s%s", "local EasyTP = require(script.EasyTP) -- Automatically generated by the TRIA Mapmaking Plugin\n", currentMap.MapScript.Source)

                if Util.hasSpecialFolder:get(false) and not currentMap.Special:FindFirstChild("Teleporters") then
                    local teleportsFolder = Instance.new("Folder")
                    teleportsFolder.Name = "Teleporters"
                    teleportsFolder.Parent = currentMap.Special
                end

                local demo = addonFiles.EasyTPDemo:Clone()
                positionModel(demo)
                for  i, part in pairs(demo:GetChildren()) do
                    part.Parent = currentMap.Special.Teleporters
                end
                demo:Destroy()
                Util.debugWarn("Successfully inserted EasyTP!")
                ChangeHistoryService:SetWaypoint("Inserted EasyTP")
            end
        },  {
            Name = "",
            Creator = "not_grif + Kris",
            Icon = "rbxassetid://12710132659",
            LayoutOrder = 2,
            Tooltip = {
                Header = "Waterjets",
                Tooltip = "This addon allows for enhanced underwater gameplay with new liquid jetstreams! \n\nThis addon is integrated with Object Tag selection and View Mode selection."
            },
    
            InsertFunction = function()
                if Util.failedScriptInjection(Util._Errors.SCRIPT_INSERT_ERROR) then
                    return Util.debugWarn("AAAAA")
                end

                local currentMap = Util.mapModel:get(false)
                if currentMap.MapScript:FindFirstChild("Waterjets") and currentMap.MapScript.Waterjets:FindFirstChild("WaterjetClient") then
                    Util:ShowMessage("Cannot Insert Addon", "This addon already exists in your map! To update the addon, delete it from your map and retry.")
                    return Util.debugWarn("BBBBBB")
                end

                ChangeHistoryService:SetWaypoint("Inserting Waterjets")

                local newModel = addonFiles:FindFirstChild("Waterjets"):Clone()
                newModel.Parent = currentMap.MapScript

                currentMap.MapScript.Source = string.format("%s%s", "local Waterjets = require(script.Waterjets) -- Automatically generated by the TRIA Mapmaking Plugin\n", currentMap.MapScript.Source)

                if Util.hasSpecialFolder:get(false) and not currentMap.Special:FindFirstChild("Waterjets") then
                    local teleportsFolder = Instance.new("Folder")
                    teleportsFolder.Name = "Waterjets"
                    teleportsFolder.Parent = currentMap.Special
                end

                local demo = addonFiles.WaterjetDemo:Clone()
                positionModel(demo)
                demo.Name = "_Waterjet0"
                demo.Parent = currentMap.Special.Waterjets

                Util.debugWarn("Successfully inserted Waterjets!")
            end
        }, {
            Name = "Mesh & Texture Kit",
            Creator = "Ancient & fxrezful",
            Icon = "rbxassetid://13369979422",
            LayoutOrder = 5,
            Tooltip = {
                Header = "Mesh & Textures Kit",
                Tooltip = "Community made models and textures for use in maps!"
            },
    
            InsertFunction = function()
                ChangeHistoryService:SetWaypoint("Inserting mesh kit")
                local model = insertModel("ModelKit", nil)
                positionModel(model)
                local newFolder = Instance.new("Folder")

                for _, part in pairs(model:GetChildren()) do
                    part.Parent = newFolder
                end
                newFolder.Name = "[INSERTED] - Mesh & Textures Kit"
                newFolder.Parent = workspace

                model:Destroy()
                Util.debugWarn("Successfully inserted Mesh & Textures Kit addon!")
                ChangeHistoryService:SetWaypoint("Inserted mesh kit")
            end
        },
    },
    Components = {
        {
            Name = "Create new variant",
            Icon = "rbxassetid://12537256759",
            LayoutOrder = 4,
            Tooltip = {
                Header = "Variants",
                Tooltip = "Whenever a map starts, one random variant will be chosen and the rest will be deleted. This can be useful to add variation in a map."
            },
    
            InsertFunction = function()
                ChangeHistoryService:SetWaypoint("Inserting new variant")
                local newVariant = Instance.new("Folder")
                local currentMap = Util.mapModel:get(false)
    
                local variantsFolder = currentMap:FindFirstChild("Variant") or currentMap.Special:FindFirstChild("Variant")
    
                if not variantsFolder then
                    variantsFolder = Instance.new("Folder")
                    variantsFolder.Name = "Variant"
                    variantsFolder.Parent = Util.hasSpecialFolder:get(false) and currentMap.Special or currentMap
                end
                
                newVariant.Name = string.format("Variant #%d", #variantsFolder:GetChildren() + 1)
                newVariant.Parent = variantsFolder
                Util.debugWarn("Successfully inserted new map variant!")
                ChangeHistoryService:SetWaypoint("Inserted new variant")
            end
        }, {
            Name = "New Button", 
            Icon = "rbxassetid://12536983604",
            LayoutOrder = 1,
            Tooltip = {
                Header = "Buttons",
                Tooltip = "One of the main features of a map. An item which players must press in sequential order to escape."
            },
    
            InsertFunction = function()
                local currentMap = Util.mapModel:get(false)
    
                local newParent = if Util.hasSpecialFolder:get(false) and currentMap.Special:FindFirstChild("Button")
                    then currentMap.Special.Button
                    elseif currentMap:FindFirstChild("Geometry") then currentMap.Geometry
                    else currentMap
    
                local highestButton = Util.getObjectCountWithNameMatch("_Button")
                local model = insertModel("_Button0", newParent)
                model.Name = "_Button" .. (highestButton + 1)
                positionModel(model)
                TagUtils.OnTagAdded("_Button"):Fire(model)
    
                Util.debugWarn("Successfully inserted new Button!")
            end
        }, {
            Name = "New Zipline",
            Icon = "rbxassetid://12536982253",
            LayoutOrder = 2,
            Tooltip = {
                Header = "Ziplines",
                Tooltip = "A feature of the mapkit allowing users to ride along a customizable zipline, with the ability to jump off and between ziplines."
            },
    
            InsertFunction = function()
                local newParent = getInsertFolder("Zipline")
                local model = insertModel("Zipline", newParent)
                positionModel(model)
                TagUtils.OnTagAdded("Zipline"):Fire(model)
                Util.debugWarn("Successfully inserted new Zipline!")
            end
        }, {
            Name = "New Airtank",
            Icon = "rbxassetid://12536983920",
            LayoutOrder = 3,
            Tooltip = {
                Header = "Airtank",
                Tooltip = "A feature allowing users to increase their oxygen supply."
            },
    
            InsertFunction = function()
                local newParent = getInsertFolder("Interactable")
                local model = insertModel("AirTank", newParent)
                positionModel(model)
                TagUtils.OnTagAdded("Airtank"):Fire(model)
                Util.debugWarn("Successfully inserted new AirTank!")
            end
        }, {
            Name = "Insert Optimized Structure",
            Icon = "rbxassetid://12536983174",
            LayoutOrder = 0,
            Tooltip = {
                Header = "Optimized Structure",
                Tooltip = "An optimized layout of every game object inside of a map, allowing for faster map loading time. Some plugin features may only support maps with this feature."
            },
    
            InsertFunction = function()
                if Util.hasSpecialFolder:get(false) then
                    Util:ShowMessage("Cannot insert model", "Your map already has the optimized map structure format! (Folder named 'Special')")
                    return
                end
    
                local newParent = Util.mapModel:get(false)
                insertModel("Special", newParent)
                Util.debugWarn("Successfully added OptimizedStructure!")
            end
        }, {
            Name = "Add Exit Region",
            Icon = "rbxassetid://12537665817",
            LayoutOrder = 7,
            Tooltip = {
                Header = "Exit Region",
                Tooltip = "The finish region where players must enter to survive. Any 'ExitBlock' parts will become collidable upon surviving."
            },
    
            InsertFunction = function()
                ChangeHistoryService:SetWaypoint("Inserting part 'Exit Region'")
    
                local newModel = componentFiles.ExitRegion:Clone()
                positionModel(newModel)
    
                local currentMap = Util.mapModel:get(false)
                if Util.hasSpecialFolder:get(false) then
                    newModel.ExitRegion.Parent = currentMap.Special.Exit.ExitRegion
                    newModel.ExitBlock.Parent = currentMap.Special.Exit.ExitBlock
                else
                    newModel.ExitRegion.Parent = currentMap
                    newModel.ExitBlock.Parent = currentMap
                end
                newModel:Destroy()
                ChangeHistoryService:SetWaypoint("Inserted new map exit!")
            end
        }, {
            Name = "Add Walljump",
            Icon = "rbxassetid://12536982734",
            LayoutOrder = 8,
            Tooltip = {
                Header = "Walljumps",
                Tooltip = "A normal walljump, but with the stock TRIA walljump texture."
            },
    
            InsertFunction = function()
                local newParent = getInsertFolder("Interactable")
                local model = insertModel("Walljump", newParent)
                positionModel(model)
                TagUtils.OnTagAdded("_WallJump"):Fire(model)
                Util.debugWarn("Successfully inserted new Walljump!")
            end
        }, {
            Name = "Insert Wallrun",
            Icon = "rbxassetid://12536982483",
            LayoutOrder = 9,
            Tooltip = {
                Header = "Wallruns",
                Tooltip = "A normal wallrun, but with the stock TRIA wallrun texture."
            },
    
            InsertFunction = function()
                local newParent = getInsertFolder("Interactable")
                local model = insertModel("Wallrun", newParent)
                positionModel(model)
                TagUtils.OnTagAdded("_WallRun"):Fire(model)
                Util.debugWarn("Successfully inserted new Wallrun!")
            end
        }, {
            Name = "Insert Gas",
            Icon = "rbxassetid://12536983391",
            LayoutOrder = 10,
            Tooltip = {
                Header = "Gas",
                Tooltip = "A normal gas liquid, but with the stock mapkit appearance."
            },
    
            InsertFunction = function()
                local newParent = getInsertFolder("Fluid")
    
                local highestGas = Util.getObjectCountWithNameMatch("_Gas")
                local model = insertModel("_Gas0", newParent)
                model.Name = "_Gas" .. (highestGas + 1)
                positionModel(model)
                TagUtils.OnTagAdded("_Gas"):Fire(model)
                Util.debugWarn("Successfully inserted new Gas!")
            end
        }, 
    }
}
